plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenLocal()

    maven {
        url = uri('https://code.mschae23.de/api/packages/mschae23/maven')
    }

    // Repositories for the dependencies of Tax Free Levels
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    // maven { url 'https://jitpack.io' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:$project.minecraft_version"
    mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$project.loader_version"

    [
        "fabric-api-base",
        "fabric-registry-sync-v0",
        "fabric-lifecycle-events-v1",
        "fabric-networking-api-v1"
    ].forEach { modImplementation fabricApi.module(it, project.fabric_api_version) }

    modCompileOnly "io.github.fourmisain:TaxFreeLevels-fabric:$project.tax_free_levels_version"

    modImplementation "de.mschae23:codec-config-api:$project.codec_config_api_version"
    include "de.mschae23:codec-config-api:$project.codec_config_api_version"
}

loom {
    accessWidenerPath = file 'src/main/resources/grindenchantments.accesswidener'

    decompilers {
        vineflower {
            options.put("ind", "    ")
            options.put("nls", "1")
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("COPYING")
    from("COPYING.LESSER")
}

// configure the maven publication
publishing {
    publications {
        create("mod", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
        maven {
            name = "Forgejo"
            url = uri("https://code.mschae23.de/api/packages/mschae23/maven")

            credentials(HttpHeaderCredentials) {
                final token = java.util.Optional.ofNullable(System.getenv("XDG_CONFIG_HOME")).map { java.nio.file.Path.of(it).resolve("packages") }.or {
                    java.util.Optional.ofNullable(System.getenv("HOME")).map { java.nio.file.Path.of(it).resolve(".config/packages") }}.or {
                    java.util.Optional.ofNullable(System.getenv("HOMEDRIVE")).flatMap { drive -> java.util.Optional.ofNullable(System.getenv("HOMEPATH"))
                        .map { drive + it }}.map { java.nio.file.Path.of(it).resolve(".packages") }}.map {
                    it.resolve("mschae23-forgejo.token") }.filter { java.nio.file.Files.exists(it) }.map {
                    java.nio.file.Files.readString(it, java.nio.charset.StandardCharsets.UTF_8)
                }.orElse("")

                name = "Authorization"
                value = "token $token"
            }

            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}
